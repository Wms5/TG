============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0
rootdir: /home/wilkinson/Documents/TCC/TG
collected 11 items

QuixBugs/python_testcases/test_get_factors.py .FFFFFFFFFF                [100%]

=================================== FAILURES ===================================
___________________ test_get_factors[input_data1-expected1] ____________________

input_data = [100], expected = [2, 2, 5, 5]

    @pytest.mark.parametrize("input_data,expected", testdata)
    def test_get_factors(input_data, expected):
>       assert get_factors(*input_data) == expected
E       assert [1, 2, 4, 5, 10, 20, ...] == [2, 2, 5, 5]
E         
E         At index 0 diff: 1 != 2
E         Left contains 5 more items, first extra item: 10
E         Use -v to get more diff

QuixBugs/python_testcases/test_get_factors.py:15: AssertionError
___________________ test_get_factors[input_data2-expected2] ____________________

input_data = [101], expected = [101]

    @pytest.mark.parametrize("input_data,expected", testdata)
    def test_get_factors(input_data, expected):
>       assert get_factors(*input_data) == expected
E       assert [1, 101] == [101]
E         
E         At index 0 diff: 1 != 101
E         Left contains one more item: 101
E         Use -v to get more diff

QuixBugs/python_testcases/test_get_factors.py:15: AssertionError
___________________ test_get_factors[input_data3-expected3] ____________________

input_data = [104], expected = [2, 2, 2, 13]

    @pytest.mark.parametrize("input_data,expected", testdata)
    def test_get_factors(input_data, expected):
>       assert get_factors(*input_data) == expected
E       assert [1, 2, 4, 8, 13, 26, ...] == [2, 2, 2, 13]
E         
E         At index 0 diff: 1 != 2
E         Left contains 4 more items, first extra item: 13
E         Use -v to get more diff

QuixBugs/python_testcases/test_get_factors.py:15: AssertionError
___________________ test_get_factors[input_data4-expected4] ____________________

input_data = [2], expected = [2]

    @pytest.mark.parametrize("input_data,expected", testdata)
    def test_get_factors(input_data, expected):
>       assert get_factors(*input_data) == expected
E       assert [1, 2] == [2]
E         
E         At index 0 diff: 1 != 2
E         Left contains one more item: 2
E         Use -v to get more diff

QuixBugs/python_testcases/test_get_factors.py:15: AssertionError
___________________ test_get_factors[input_data5-expected5] ____________________

input_data = [3], expected = [3]

    @pytest.mark.parametrize("input_data,expected", testdata)
    def test_get_factors(input_data, expected):
>       assert get_factors(*input_data) == expected
E       assert [1, 3] == [3]
E         
E         At index 0 diff: 1 != 3
E         Left contains one more item: 3
E         Use -v to get more diff

QuixBugs/python_testcases/test_get_factors.py:15: AssertionError
___________________ test_get_factors[input_data6-expected6] ____________________

input_data = [17], expected = [17]

    @pytest.mark.parametrize("input_data,expected", testdata)
    def test_get_factors(input_data, expected):
>       assert get_factors(*input_data) == expected
E       assert [1, 17] == [17]
E         
E         At index 0 diff: 1 != 17
E         Left contains one more item: 17
E         Use -v to get more diff

QuixBugs/python_testcases/test_get_factors.py:15: AssertionError
___________________ test_get_factors[input_data7-expected7] ____________________

input_data = [63], expected = [3, 3, 7]

    @pytest.mark.parametrize("input_data,expected", testdata)
    def test_get_factors(input_data, expected):
>       assert get_factors(*input_data) == expected
E       assert [1, 3, 7, 9, 21, 63] == [3, 3, 7]
E         
E         At index 0 diff: 1 != 3
E         Left contains 3 more items, first extra item: 9
E         Use -v to get more diff

QuixBugs/python_testcases/test_get_factors.py:15: AssertionError
___________________ test_get_factors[input_data8-expected8] ____________________

input_data = [74], expected = [2, 37]

    @pytest.mark.parametrize("input_data,expected", testdata)
    def test_get_factors(input_data, expected):
>       assert get_factors(*input_data) == expected
E       assert [1, 2, 37, 74] == [2, 37]
E         
E         At index 0 diff: 1 != 2
E         Left contains 2 more items, first extra item: 37
E         Use -v to get more diff

QuixBugs/python_testcases/test_get_factors.py:15: AssertionError
___________________ test_get_factors[input_data9-expected9] ____________________

input_data = [73], expected = [73]

    @pytest.mark.parametrize("input_data,expected", testdata)
    def test_get_factors(input_data, expected):
>       assert get_factors(*input_data) == expected
E       assert [1, 73] == [73]
E         
E         At index 0 diff: 1 != 73
E         Left contains one more item: 73
E         Use -v to get more diff

QuixBugs/python_testcases/test_get_factors.py:15: AssertionError
__________________ test_get_factors[input_data10-expected10] ___________________

input_data = [9837], expected = [3, 3, 1093]

    @pytest.mark.parametrize("input_data,expected", testdata)
    def test_get_factors(input_data, expected):
>       assert get_factors(*input_data) == expected
E       assert [1, 3, 9, 1093, 3279, 9837] == [3, 3, 1093]
E         
E         At index 0 diff: 1 != 3
E         Left contains 3 more items, first extra item: 1093
E         Use -v to get more diff

QuixBugs/python_testcases/test_get_factors.py:15: AssertionError
=========================== short test summary info ============================
FAILED QuixBugs/python_testcases/test_get_factors.py::test_get_factors[input_data1-expected1]
FAILED QuixBugs/python_testcases/test_get_factors.py::test_get_factors[input_data2-expected2]
FAILED QuixBugs/python_testcases/test_get_factors.py::test_get_factors[input_data3-expected3]
FAILED QuixBugs/python_testcases/test_get_factors.py::test_get_factors[input_data4-expected4]
FAILED QuixBugs/python_testcases/test_get_factors.py::test_get_factors[input_data5-expected5]
FAILED QuixBugs/python_testcases/test_get_factors.py::test_get_factors[input_data6-expected6]
FAILED QuixBugs/python_testcases/test_get_factors.py::test_get_factors[input_data7-expected7]
FAILED QuixBugs/python_testcases/test_get_factors.py::test_get_factors[input_data8-expected8]
FAILED QuixBugs/python_testcases/test_get_factors.py::test_get_factors[input_data9-expected9]
FAILED QuixBugs/python_testcases/test_get_factors.py::test_get_factors[input_data10-expected10]
========================= 10 failed, 1 passed in 0.05s =========================
Different AST

tenta resolver outra coisa
