============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0
rootdir: /home/wilkinson/Documents/TCC/TG
collected 10 items

QuixBugs/python_testcases/test_possible_change.py .FFFFFFFFF             [100%]

=================================== FAILURES ===================================
_____________________ test_possible_change[input_data1-4] ______________________

input_data = [[1, 5, 10, 25], 11], expected = 4

    @pytest.mark.parametrize("input_data,expected", testdata)
    def test_possible_change(input_data, expected):
>       assert possible_change(*input_data) == expected

QuixBugs/python_testcases/test_possible_change.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

coins = [1, 5, 10, 25], total = 11, memo = {}

    def possible_change(coins, total, memo={}):
        if total == 0:
            return 1
        if total < 0 or not coins:
            return 0
>       if (coins, total) in memo:
E       TypeError: unhashable type: 'list'

QuixBugs/python_programs/possible_change.py:7: TypeError
____________________ test_possible_change[input_data2-121] _____________________

input_data = [[1, 5, 10, 25], 75], expected = 121

    @pytest.mark.parametrize("input_data,expected", testdata)
    def test_possible_change(input_data, expected):
>       assert possible_change(*input_data) == expected

QuixBugs/python_testcases/test_possible_change.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

coins = [1, 5, 10, 25], total = 75, memo = {}

    def possible_change(coins, total, memo={}):
        if total == 0:
            return 1
        if total < 0 or not coins:
            return 0
>       if (coins, total) in memo:
E       TypeError: unhashable type: 'list'

QuixBugs/python_programs/possible_change.py:7: TypeError
_____________________ test_possible_change[input_data3-18] _____________________

input_data = [[1, 5, 10, 25], 34], expected = 18

    @pytest.mark.parametrize("input_data,expected", testdata)
    def test_possible_change(input_data, expected):
>       assert possible_change(*input_data) == expected

QuixBugs/python_testcases/test_possible_change.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

coins = [1, 5, 10, 25], total = 34, memo = {}

    def possible_change(coins, total, memo={}):
        if total == 0:
            return 1
        if total < 0 or not coins:
            return 0
>       if (coins, total) in memo:
E       TypeError: unhashable type: 'list'

QuixBugs/python_programs/possible_change.py:7: TypeError
_____________________ test_possible_change[input_data4-16] _____________________

input_data = [[1, 5, 10], 34], expected = 16

    @pytest.mark.parametrize("input_data,expected", testdata)
    def test_possible_change(input_data, expected):
>       assert possible_change(*input_data) == expected

QuixBugs/python_testcases/test_possible_change.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

coins = [1, 5, 10], total = 34, memo = {}

    def possible_change(coins, total, memo={}):
        if total == 0:
            return 1
        if total < 0 or not coins:
            return 0
>       if (coins, total) in memo:
E       TypeError: unhashable type: 'list'

QuixBugs/python_programs/possible_change.py:7: TypeError
____________________ test_possible_change[input_data5-568] _____________________

input_data = [[1, 5, 10, 25], 140], expected = 568

    @pytest.mark.parametrize("input_data,expected", testdata)
    def test_possible_change(input_data, expected):
>       assert possible_change(*input_data) == expected

QuixBugs/python_testcases/test_possible_change.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

coins = [1, 5, 10, 25], total = 140, memo = {}

    def possible_change(coins, total, memo={}):
        if total == 0:
            return 1
        if total < 0 or not coins:
            return 0
>       if (coins, total) in memo:
E       TypeError: unhashable type: 'list'

QuixBugs/python_programs/possible_change.py:7: TypeError
____________________ test_possible_change[input_data6-786] _____________________

input_data = [[1, 5, 10, 25, 50], 140], expected = 786

    @pytest.mark.parametrize("input_data,expected", testdata)
    def test_possible_change(input_data, expected):
>       assert possible_change(*input_data) == expected

QuixBugs/python_testcases/test_possible_change.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

coins = [1, 5, 10, 25, 50], total = 140, memo = {}

    def possible_change(coins, total, memo={}):
        if total == 0:
            return 1
        if total < 0 or not coins:
            return 0
>       if (coins, total) in memo:
E       TypeError: unhashable type: 'list'

QuixBugs/python_programs/possible_change.py:7: TypeError
____________________ test_possible_change[input_data7-817] _____________________

input_data = [[1, 5, 10, 25, 50, 100], 140], expected = 817

    @pytest.mark.parametrize("input_data,expected", testdata)
    def test_possible_change(input_data, expected):
>       assert possible_change(*input_data) == expected

QuixBugs/python_testcases/test_possible_change.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

coins = [1, 5, 10, 25, 50, 100], total = 140, memo = {}

    def possible_change(coins, total, memo={}):
        if total == 0:
            return 1
        if total < 0 or not coins:
            return 0
>       if (coins, total) in memo:
E       TypeError: unhashable type: 'list'

QuixBugs/python_programs/possible_change.py:7: TypeError
____________________ test_possible_change[input_data8-981] _____________________

input_data = [[1, 3, 7, 42, 78], 140], expected = 981

    @pytest.mark.parametrize("input_data,expected", testdata)
    def test_possible_change(input_data, expected):
>       assert possible_change(*input_data) == expected

QuixBugs/python_testcases/test_possible_change.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

coins = [1, 3, 7, 42, 78], total = 140, memo = {}

    def possible_change(coins, total, memo={}):
        if total == 0:
            return 1
        if total < 0 or not coins:
            return 0
>       if (coins, total) in memo:
E       TypeError: unhashable type: 'list'

QuixBugs/python_programs/possible_change.py:7: TypeError
_____________________ test_possible_change[input_data9-20] _____________________

input_data = [[3, 7, 42, 78], 140], expected = 20

    @pytest.mark.parametrize("input_data,expected", testdata)
    def test_possible_change(input_data, expected):
>       assert possible_change(*input_data) == expected

QuixBugs/python_testcases/test_possible_change.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

coins = [3, 7, 42, 78], total = 140, memo = {}

    def possible_change(coins, total, memo={}):
        if total == 0:
            return 1
        if total < 0 or not coins:
            return 0
>       if (coins, total) in memo:
E       TypeError: unhashable type: 'list'

QuixBugs/python_programs/possible_change.py:7: TypeError
=========================== short test summary info ============================
FAILED QuixBugs/python_testcases/test_possible_change.py::test_possible_change[input_data1-4]
FAILED QuixBugs/python_testcases/test_possible_change.py::test_possible_change[input_data2-121]
FAILED QuixBugs/python_testcases/test_possible_change.py::test_possible_change[input_data3-18]
FAILED QuixBugs/python_testcases/test_possible_change.py::test_possible_change[input_data4-16]
FAILED QuixBugs/python_testcases/test_possible_change.py::test_possible_change[input_data5-568]
FAILED QuixBugs/python_testcases/test_possible_change.py::test_possible_change[input_data6-786]
FAILED QuixBugs/python_testcases/test_possible_change.py::test_possible_change[input_data7-817]
FAILED QuixBugs/python_testcases/test_possible_change.py::test_possible_change[input_data8-981]
FAILED QuixBugs/python_testcases/test_possible_change.py::test_possible_change[input_data9-20]
========================= 9 failed, 1 passed in 0.05s ==========================
Different AST

prover correção mas insere bug
